# .github/workflows/build_apk.yml

name: Build Flutter APK (Direct Gradle)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      apk_path: ${{ steps.upload_artifact.outputs.artifact-path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # Setup Flutter (still needed for dart dependencies)
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2' # Or your preferred version
          channel: 'stable'
          cache: true

      - name: Display Flutter Version Used
        run: flutter --version

      - name: Get Flutter dependencies
        # This creates the .dart_tool/package_config.json in the root
        run: flutter pub get

      # --- Clean Steps ---
      - name: Clean Flutter Artifacts
        run: flutter clean

      - name: Grant Gradlew Permission
        run: chmod +x android/gradlew

      - name: Clean Android Gradle Project
        run: ./gradlew clean --no-daemon
        working-directory: ./android

      # --- Build Step (Direct Gradle Call) ---
      - name: Build APK with Gradle Directly
        id: build_gradle
        # Pass the Flutter project root directory to Gradle
        run: ./gradlew assembleRelease -Pflutter-project-dir=../ --no-daemon
        working-directory: ./android # Execute from android directory

      # --- Verification and Upload ---
      - name: Verify Final APK Existence and Size
        # Check both potential output paths after direct gradle build
        run: |
          echo "Checking for final APK at Gradle default path..."
          ls -lh android/build/app/outputs/apk/release/app-release.apk || echo "APK not found at android/build/app/outputs/apk/release/app-release.apk"
          echo "----------------------------------------"
          echo "Checking for final APK at Flutter default path..."
          ls -lh build/app/outputs/flutter-apk/app-release.apk || echo "APK not found at build/app/outputs/flutter-apk/app-release.apk"
          echo "----------------------------------------"

      - name: List Build Output Directory
        if: always() # Run even if previous steps fail
        run: |
          echo "Listing contents of ./android/build/app/outputs/:"
          ls -R ./android/build/app/outputs/ || echo "Android output directory not found or inaccessible."
          echo "----------------------------------------"
          echo "Listing contents of ./build/app/outputs/:"
          ls -R ./build/app/outputs/ || echo "Flutter output directory not found or inaccessible."
          echo "----------------------------------------"

      - name: Upload APK Artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-gradle
          # Use the path Gradle typically outputs to when called directly
          path: android/build/app/outputs/apk/release/app-release.apk
          # If verification step shows it's in flutter-apk, change this path
          if-no-files-found: error
