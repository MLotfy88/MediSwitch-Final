"""
Django settings for mediswitch_api project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os # Import os for environment variables
from pathlib import Path
from datetime import timedelta # Import timedelta for JWT settings
# from dotenv import load_dotenv # No longer needed, Docker Compose handles env vars
import dj_database_url # Import dj-database-url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables are now loaded via docker-compose env_file
# load_dotenv(BASE_DIR / '.env') # No longer needed

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable or use default (unsafe for production)
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-uxn@r^^ge2$i-9pwoj7pw0=7id^iesumu*917n@6rwqp8z8cq5')

# SECURITY WARNING: don't run with debug turned on in production!
# Get DEBUG from environment variable (convert string to boolean)
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

# Get ALLOWED_HOSTS from environment variable (comma-separated string)
ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',') if os.getenv('DJANGO_ALLOWED_HOSTS') else []
# Add 'localhost' and '127.0.0.1' for local development if DEBUG is True and ALLOWED_HOSTS is empty
# Note: DEBUG itself is read from env var earlier
if os.getenv('DJANGO_DEBUG', 'True') == 'True' and not ALLOWED_HOSTS:
     ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',

    # Your apps
    'api', # Add the newly created api app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Add WhiteNoise middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Add CORS middleware (place high)
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mediswitch_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Add the project-level templates directory
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True, # Keep True to also find templates inside apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mediswitch_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Use dj-database-url to parse the DATABASE_URL environment variable
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    print("INFO: Reading database configuration from DATABASE_URL environment variable.")
    DATABASES = {
        'default': dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=os.getenv('DATABASE_SSL', 'False') == 'True')
    }
else:
    # Fallback to SQLite if DATABASE_URL is not set (e.g., for local testing without env file)
    print("WARNING: DATABASE_URL environment variable not set. Falling back to SQLite.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Ensure the default engine is set if parsed from URL but empty (useful for some dj-database-url versions)
if DATABASES['default'].get('ENGINE', '') == '':
     print("INFO: Setting default database engine to postgresql.")
     DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us' # Consider changing to 'ar' if needed for admin

TIME_ZONE = 'UTC' # Consider changing to 'Africa/Cairo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# Define STATIC_ROOT for collectstatic
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Use WhiteNoise's storage backend for compression and caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (Uploaded files like CSV/Excel)
# https://docs.djangoproject.com/en/4.2/topics/files/
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' # Directory to store uploaded files


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- REST Framework Settings ---
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Add other authentication classes if needed (e.g., SessionAuthentication for browsable API)
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # Example: Allow read-only for anonymous, require auth for write
    )
    # Add other DRF settings like pagination, throttling etc. if needed
}

# --- Simple JWT Settings ---
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Adjust as needed
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True, # Enable rotation for better security
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY, # Use the main SECRET_KEY
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# --- CORS Settings ---
# https://github.com/adamchainz/django-cors-headers

# Allow all origins (since the mobile app needs to access read-only endpoints)
# Consider tightening this if specific origins are known and stable,
# or if sensitive data requires more restricted access.
CORS_ALLOW_ALL_ORIGINS = True

# Or, specify allowed origins explicitly for production (alternative):
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8080", # Example Flutter web dev server
#     "http://127.0.0.1:8080",
#     "https://your-frontend-domain.com",
# ]

# Allow credentials (if needed for session auth, etc.)
# CORS_ALLOW_CREDENTIALS = True

# Specify allowed methods (defaults are usually fine)
# CORS_ALLOW_METHODS = [ ... ]

# Specify allowed headers (defaults are usually fine)
# CORS_ALLOW_HEADERS = [ ... ]
