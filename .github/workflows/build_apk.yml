# اسم الـ Workflow (سيظهر في تبويب Actions على GitHub)
name: Build Flutter Android APK

# متى يتم تشغيل الـ Workflow؟
on:
  push:
    branches:
      - main # يتم التشغيل عند الدفع إلى الفرع main (يمكن تعديله لفروع أخرى)
  workflow_dispatch: # يسمح بتشغيل الـ Workflow يدويًا من واجهة GitHub

jobs:
  build:
    # نوع الجهاز الافتراضي الذي سيتم تشغيل الـ job عليه (مقدم من GitHub)
    runs-on: ubuntu-latest

    steps:
      # الخطوة 1: سحب كود المشروع من المستودع
      - name: Checkout Repository
        uses: actions/checkout@v4 # استخدام أحدث إصدار من action السحب

      # الخطوة 2: إعداد بيئة Java (JDK 17 مطلوب لمشروعك)
      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # توزيعة Java شائعة
          java-version: '17'

      # الخطوة 3: إعداد بيئة Flutter (بنفس الإصدار المستخدم 3.29.2)
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2 # action شائع لإعداد Flutter
        with:
          flutter-version: '3.29.2' # تأكد من تطابق هذا الإصدار مع مشروعك
          channel: 'stable' # القناة المستخدمة
          cache: true # تفعيل الكاش لتسريع عمليات البناء المستقبلية

      # الخطوة 4: تحميل الاعتماديات الخاصة بالمشروع
      - name: Get Flutter Dependencies
        run: flutter pub get

      # الخطوة 5: بناء ملف APK نسخة Release
      # ملاحظة: هذا الأمر يبني APK غير موقع (unsigned). للتوقيع للنشر على Google Play،
      # ستحتاج لإعداد Keystore و Secrets لإدارة كلمات المرور والمفاتيح بأمان.
      - name: Build Release APK
        run: flutter build apk --release

      # الخطوة 6: رفع ملف APK الناتج كـ Artifact
      # هذا يسمح لك بتنزيل الملف الناتج من صفحة الـ Workflow run على GitHub
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk # اسم الـ Artifact الذي سيظهر
          path: build/app/outputs/flutter-apk/app-release.apk # المسار إلى ملف APK الناتج
