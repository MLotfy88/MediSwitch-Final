name: Build Android APK

# Updated metadata with current timestamp
env:
  WORKFLOW_VERSION: '1.0.0'
  CURRENT_DATE: '2025-03-29'
  CURRENT_TIME: '13:00:02'
  MAINTAINER: 'MLotfy88'
  RUNNER_VERSION: '2.323.0'
  RUNNER_OS: 'ubuntu-24.04'
  RUNNER_IMAGE_VERSION: '20250323.1.0'

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  pages: write
  pull-requests: write
  security-events: write
  statuses: write
  metadata: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      BUILD_TIMESTAMP: '2025-03-29 13:00:02'
      BUILDER: 'MLotfy88'

    steps:
      # Add pre-flight check
      - name: Pre-flight Check
        run: |
          echo "Starting pre-flight checks..."
          echo "Current Date: $CURRENT_DATE"
          echo "Current Time: $CURRENT_TIME"
          echo "Current User: $BUILDER"
          echo "Checking system resources..."
          free -h
          df -h
          echo "Checking environment..."
          env | sort

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Repository
        run: |
          echo "Verifying repository structure..."
          ls -la
          echo "Checking for essential files..."
          test -f "pubspec.yaml" || { echo "pubspec.yaml not found"; exit 1; }
          test -d "android" || { echo "android directory not found"; exit 1; }
          test -d "lib" || { echo "lib directory not found"; exit 1; }

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Install CMake
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build
          cmake --version || { echo "CMake installation failed"; exit 1; }

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Verify Android SDK
        run: |
          echo "Verifying Android SDK installation..."
          echo "ANDROID_SDK_ROOT = $ANDROID_SDK_ROOT"
          test -d "$ANDROID_SDK_ROOT" || { echo "Android SDK directory not found"; exit 1; }

      - name: Install Android SDK components
        run: |
          echo "Installing Android SDK components..."
          sdkmanager --install "platform-tools" "platforms;android-33" "build-tools;33.0.0" "ndk;25.1.8937393"
          echo "y" | sdkmanager --licenses
          echo "Verifying installations..."
          sdkmanager --list | grep "installed"

      - name: Setup Gradle
        run: |
          cd android
          chmod +x ./gradlew
          echo "Creating gradle.properties..."
          cat << EOF > gradle.properties
          org.gradle.jvmargs=-Xmx4096M -Dfile.encoding=UTF-8
          org.gradle.daemon=false
          org.gradle.parallel=true
          android.useAndroidX=true
          android.enableJetifier=true
          android.defaults.buildfeatures.buildconfig=true
          android.nonTransitiveRClass=false
          android.ndkVersion=25.1.8937393
          EOF
          echo "Creating local.properties..."
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "ndk.dir=$ANDROID_SDK_ROOT/ndk/25.1.8937393" >> local.properties
          echo "Verifying Gradle setup..."
          ./gradlew -v || { echo "Gradle verification failed"; exit 1; }
          cd ..

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Verify Flutter
        run: |
          echo "Verifying Flutter installation..."
          flutter doctor -v
          flutter --version

      - name: Initialize Flutter
        run: |
          echo "Initializing Flutter project..."
          flutter pub get
          flutter clean
          cd android
          ./gradlew clean
          cd ..
          echo "Creating .dart_tool directory..."
          mkdir -p .dart_tool
          echo "Running pub get with verbose output..."
          flutter pub get --verbose
          echo "Running build runner..."
          flutter pub run build_runner build --delete-conflicting-outputs || true

      - name: Setup Debug Keystore
        run: |
          echo "Setting up Debug Keystore..."
          mkdir -p ~/.android
          keytool -genkey -v \
            -keystore ~/.android/debug.keystore \
            -storepass android \
            -alias androiddebugkey \
            -keypass android \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "Verifying keystore..."
          test -f ~/.android/debug.keystore || { echo "Keystore creation failed"; exit 1; }

      - name: Build APK
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          echo "Starting APK build process..."
          echo "Step 1: Flutter clean"
          flutter clean
          
          echo "Step 2: Gradle build"
          cd android
          ./gradlew clean
          ./gradlew assembleRelease --stacktrace --info
          cd ..
          
          echo "Step 3: Flutter build"
          flutter build apk --release --verbose
          
          echo "Build completed, verifying outputs..."
          echo "Checking Android outputs:"
          ls -la android/app/build/outputs/apk/release/
          echo "Checking Flutter outputs:"
          ls -la build/app/outputs/flutter-apk/ || echo "Flutter output directory not found"

      - name: Add Build Info
        run: |
          echo "Creating build information file..."
          {
            echo "Build Information:"
            echo "Build Date: $BUILD_TIMESTAMP"
            echo "Builder: $BUILDER"
            echo "Workflow Version: $WORKFLOW_VERSION"
            echo "Runner Version: $RUNNER_VERSION"
            echo "Runner OS: $RUNNER_OS"
            echo "Runner Image Version: $RUNNER_IMAGE_VERSION"
            echo "Flutter Version: $(flutter --version | head -n 1)"
            echo "Gradle Version: $(cd android && ./gradlew -v | grep 'Gradle' | head -n 1)"
            echo "System Information: $(uname -a)"
          } > build_info.txt

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            android/app/build/outputs/apk/release/app-release.apk
            build_info.txt
          if-no-files-found: error

      - name: Upload Build Info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build_info.txt
          retention-days: 30
