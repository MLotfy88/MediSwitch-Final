name: Build Flutter Android APK

on:
  push:
    branches:
      - main # تشغيل عند الدفع إلى الفرع الرئيسي
  workflow_dispatch: # السماح بتشغيل الـ workflow يدويًا من واجهة GitHub

jobs:
  build:
    runs-on: ubuntu-latest # استخدام أحدث إصدار من Ubuntu كبيئة تشغيل

    steps:
      # 1. سحب الكود من المستودع
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. إعداد Java Development Kit (JDK) إصدار 17
      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # توزيعة Temurin (Adoptium سابقًا)
          java-version: '17' # تحديد الإصدار 17

      # 3. إعداد Flutter SDK
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2' # تحديد إصدار Flutter (يمكن تغييره حسب الحاجة)
          channel: 'stable'       # استخدام القناة المستقرة
          cache: true             # تفعيل الكاش لتسريع العمليات المستقبلية

      # 4. تحميل الاعتماديات الخاصة بـ Flutter
      - name: Get Flutter Dependencies
        run: flutter pub get

      # 5. (اختياري) طباعة طول الـ Secrets للتحقق من وجودها
      - name: Debug Secrets (Length Check)
        run: |
          echo "Keystore Base64 Length: ${#SECRETS_RELEASE_KEYSTORE_BASE64}"
          echo "Encryption Password Length: ${#SECRETS_RELEASE_KEYSTORE_ENCRYPTION_PASSWORD}"
        env:
          SECRETS_RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
          SECRETS_RELEASE_KEYSTORE_ENCRYPTION_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_ENCRYPTION_PASSWORD }}

      # 6. فك تشفير Keystore من Base64 وحفظه كملف .gpg مشفر
      - name: Decode Keystore
        run: echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > android/app/release.jks.gpg
        env:
          # تمرير الـ secret كمتغير بيئة لهذه الخطوة فقط لتجنب ظهوره في السجلات إذا فشل الأمر
          SECRETS_RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}

      # 7. التحقق من وجود ملف Keystore المشفر (.gpg)
      - name: Verify Keystore File (.gpg)
        run: ls -l android/app/release.jks.gpg || (echo "ERROR: Keystore GPG file missing!" && exit 1)

      # 8. فك تشفير ملف Keystore (.gpg) باستخدام كلمة مرور التشفير
      - name: Decrypt Keystore
        run: |
          gpg --quiet --batch --yes --pinentry-mode loopback --passphrase="${{ secrets.RELEASE_KEYSTORE_ENCRYPTION_PASSWORD }}" \
          --decrypt --output android/app/release.jks android/app/release.jks.gpg
        env:
          # تمرير كلمة المرور كمتغير بيئة لهذه الخطوة
          RELEASE_KEYSTORE_ENCRYPTION_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_ENCRYPTION_PASSWORD }}

      # 9. التحقق من وجود ملف Keystore النهائي (.jks)
      - name: Verify Keystore File (.jks)
        run: ls -l android/app/release.jks || (echo "ERROR: Decrypted Keystore JKS file missing!" && exit 1)

      # 10. بناء ملفات APK بإصدار Release مع تقسيم حسب المعمارية
      - name: Build Release APKs (Split per ABI)
        run: flutter build apk --release --split-per-abi
        env:
          # تمرير الـ Secrets كمتغيرات بيئة ليتمكن Gradle من قراءتها عبر System.getenv()
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

      # 11. رفع ملفات APK الناتجة كـ Artifacts
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apks # اسم الـ Artifact (يحتوي على كل ملفات APK)
          # المسار يحتوي على wildcard (*) لرفع كل ملفات .apk الموجودة في المجلد الناتج
          path: build/app/outputs/flutter-apk/*.apk
          if-no-files-found: error # إظهار خطأ إذا لم يتم العثور على ملفات APK
